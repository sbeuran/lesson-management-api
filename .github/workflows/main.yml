name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        AWS_DEFAULT_REGION: eu-west-1
        TESTING: "true"
        AWS_ACCESS_KEY_ID: testing
        AWS_SECRET_ACCESS_KEY: testing
        AWS_SECURITY_TOKEN: testing
        AWS_SESSION_TOKEN: testing
        MOTO_ACCOUNT_ID: '123456789012'
      run: |
        python -m pytest tests/ --cov=src --cov-report=term-missing -v
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Get AWS account ID
      id: get-aws-account
      run: |
        echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mangum
        
    - name: Create deployment package
      run: |
        mkdir -p package
        cp -r src/* package/
        cp requirements.txt package/
        cd package
        zip -r ../deployment.zip ./*
        
    - name: Deploy to AWS
      run: |
        # Create DynamoDB table if it doesn't exist
        aws dynamodb create-table \
          --table-name lesson_completions \
          --attribute-definitions \
            AttributeName=student_id,AttributeType=S \
            AttributeName=id,AttributeType=S \
          --key-schema \
            AttributeName=student_id,KeyType=HASH \
            AttributeName=id,KeyType=RANGE \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          --region eu-west-1 || true
        
        # Create IAM role for Lambda if it doesn't exist
        aws iam create-role \
          --role-name lambda-role \
          --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [{
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }]
          }' || true
        
        # Attach necessary policies to the role
        aws iam attach-role-policy \
          --role-name lambda-role \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true
        
        aws iam attach-role-policy \
          --role-name lambda-role \
          --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess || true
        
        # Wait for role to be ready
        sleep 10
        
        # Create Lambda function if it doesn't exist, update if it does
        function_name="lesson-completion-api"
        
        if aws lambda get-function --function-name $function_name 2>&1 | grep -q "Function not found"; then
          # Create new function
          aws lambda create-function \
            --function-name $function_name \
            --runtime python3.9 \
            --handler src.api.lambda_handler.handler \
            --role "arn:aws:iam::$AWS_ACCOUNT_ID:role/lambda-role" \
            --zip-file fileb://deployment.zip
        else
          # Update existing function
          aws lambda update-function-code \
            --function-name $function_name \
            --zip-file fileb://deployment.zip
        fi

        # Create or update API Gateway
        api_name="lesson-completion-api"
        
        # Check if API exists
        existing_api_id=$(aws apigateway get-rest-apis --query "items[?name=='${api_name}'].id" --output text) || true
        
        if [ -z "$existing_api_id" ]; then
          # Create new API
          api_id=$(aws apigateway create-rest-api \
            --name "${api_name}" \
            --query 'id' \
            --output text)
          
          # Get root resource ID
          root_resource_id=$(aws apigateway get-resources \
            --rest-api-id "${api_id}" \
            --query 'items[?path==`/`].id' \
            --output text)
          
          # Create resource for /lessons
          lessons_resource_id=$(aws apigateway create-resource \
            --rest-api-id "${api_id}" \
            --parent-id "${root_resource_id}" \
            --path-part "lessons" \
            --query 'id' \
            --output text)
          
          # Create resource for /lessons/completion
          completion_resource_id=$(aws apigateway create-resource \
            --rest-api-id "${api_id}" \
            --parent-id "${lessons_resource_id}" \
            --path-part "completion" \
            --query 'id' \
            --output text)
          
          # Create POST method
          aws apigateway put-method \
            --rest-api-id "${api_id}" \
            --resource-id "${completion_resource_id}" \
            --http-method POST \
            --authorization-type NONE
          
          # Create GET method
          aws apigateway put-method \
            --rest-api-id "${api_id}" \
            --resource-id "${completion_resource_id}" \
            --http-method GET \
            --authorization-type NONE
          
          # Set up Lambda integration for POST
          aws apigateway put-integration \
            --rest-api-id "${api_id}" \
            --resource-id "${completion_resource_id}" \
            --http-method POST \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:${AWS_DEFAULT_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:function:${function_name}/invocations"
          
          # Set up Lambda integration for GET
          aws apigateway put-integration \
            --rest-api-id "${api_id}" \
            --resource-id "${completion_resource_id}" \
            --http-method GET \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:${AWS_DEFAULT_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:function:${function_name}/invocations"
          
          # Add Lambda permission for API Gateway
          aws lambda add-permission \
            --function-name "${function_name}" \
            --statement-id "AllowAPIGatewayInvoke" \
            --action "lambda:InvokeFunction" \
            --principal "apigateway.amazonaws.com" \
            --source-arn "arn:aws:execute-api:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:${api_id}/*/*"
          
          # Deploy the API
          aws apigateway create-deployment \
            --rest-api-id "${api_id}" \
            --stage-name "prod"
          
          # Output the API URL
          echo "API URL: https://${api_id}.execute-api.${AWS_DEFAULT_REGION}.amazonaws.com/prod/lessons/completion"
        else
          # Deploy updates to existing API
          aws apigateway create-deployment \
            --rest-api-id "${existing_api_id}" \
            --stage-name "prod"
          
          echo "API URL: https://${existing_api_id}.execute-api.${AWS_DEFAULT_REGION}.amazonaws.com/prod/lessons/completion"
        fi 