name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        AWS_DEFAULT_REGION: eu-west-1
        TESTING: "true"
        AWS_ACCESS_KEY_ID: testing
        AWS_SECRET_ACCESS_KEY: testing
        AWS_SECURITY_TOKEN: testing
        AWS_SESSION_TOKEN: testing
      run: |
        python -m pytest tests/ --cov=src --cov-report=term-missing -v
        
    - name: Start Moto server
      run: |
        pip install moto[server]
        moto_server dynamodb -p5000 &
        sleep 5  # Wait for server to start
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Get AWS account ID
      id: get-aws-account
      run: |
        echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mangum
        
    - name: Create deployment package
      run: |
        mkdir -p package
        cp -r src/* package/
        cp requirements.txt package/
        cd package
        zip -r ../deployment.zip ./*
        
    - name: Deploy to AWS
      run: |
        # Add error checking
        set -e
        
        # Create DynamoDB table if it doesn't exist
        aws dynamodb create-table \
          --table-name lesson_completions \
          --attribute-definitions \
            AttributeName=student_id,AttributeType=S \
            AttributeName=id,AttributeType=S \
          --key-schema \
            AttributeName=student_id,KeyType=HASH \
            AttributeName=id,KeyType=RANGE \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          --region eu-west-1 || true
        
        # Create IAM role for Lambda if it doesn't exist
        aws iam create-role \
          --role-name lambda-role \
          --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [{
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }]
          }' || true
        
        # Attach necessary policies to the role
        aws iam attach-role-policy \
          --role-name lambda-role \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true
        
        aws iam attach-role-policy \
          --role-name lambda-role \
          --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess || true
        
        # Add API Gateway management permissions
        aws iam put-role-policy \
          --role-name lambda-role \
          --policy-name "APIGatewayManagement" \
          --policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "apigateway:POST",
                  "apigateway:GET",
                  "apigateway:PUT",
                  "apigateway:PATCH",
                  "apigateway:DELETE"
                ],
                "Resource": "*"
              }
            ]
          }'
        
        # Wait for role to be ready
        sleep 10
        
        # Create or update Lambda function
        function_name="lesson-completion-api"
        
        if aws lambda get-function --function-name $function_name >/dev/null 2>&1; then
          echo "Updating existing Lambda function..."
          aws lambda update-function-code \
            --function-name $function_name \
            --zip-file fileb://deployment.zip
        else
          echo "Creating new Lambda function..."
          aws lambda create-function \
            --function-name $function_name \
            --runtime python3.9 \
            --handler src.api.lambda_handler.handler \
            --role "arn:aws:iam::$AWS_ACCOUNT_ID:role/lambda-role" \
            --timeout 30 \
            --memory-size 256 \
            --zip-file fileb://deployment.zip
        fi
        
        # Wait for function to be ready
        echo "Waiting for Lambda function to be ready..."
        sleep 15

        # Create or update API Gateway
        api_name="lesson-completion-api"
        
        # Get existing API ID
        existing_api_id=$(aws apigateway get-rest-apis --query "items[?name=='${api_name}'].id" --output text || echo "")
        
        # Delete existing API if it exists and is not empty
        if [ ! -z "$existing_api_id" ] && [ "$existing_api_id" != "None" ]; then
          echo "Deleting existing API..."
          aws apigateway delete-rest-api --rest-api-id "$existing_api_id"
          echo "Waiting for API deletion..."
          sleep 30
        fi

        # Create new API
        echo "Creating new API..."
        api_id=$(aws apigateway create-rest-api \
          --name "$api_name" \
          --endpoint-configuration "types=REGIONAL" \
          --query 'id' \
          --output text)

        echo "Getting root resource ID..."
        root_resource_id=$(aws apigateway get-resources \
          --rest-api-id "$api_id" \
          --query 'items[?path==`/`].id' \
          --output text)

        echo "Creating health endpoint..."
        health_resource_id=$(aws apigateway create-resource \
          --rest-api-id "$api_id" \
          --parent-id "$root_resource_id" \
          --path-part "health" \
          --query 'id' \
          --output text)

        echo "Creating GET method..."
        aws apigateway put-method \
          --rest-api-id "$api_id" \
          --resource-id "$health_resource_id" \
          --http-method GET \
          --authorization-type "NONE" \
          --api-key-required=true

        echo "Creating integration..."
        aws apigateway put-integration \
          --rest-api-id "$api_id" \
          --resource-id "$health_resource_id" \
          --http-method GET \
          --type AWS_PROXY \
          --integration-http-method POST \
          --uri "arn:aws:apigateway:${AWS_DEFAULT_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:function:${function_name}/invocations"

        echo "Creating method response..."
        aws apigateway put-method-response \
          --rest-api-id "$api_id" \
          --resource-id "$health_resource_id" \
          --http-method GET \
          --status-code 200 \
          --response-models application/json=Empty

        echo "Creating integration response..."
        aws apigateway put-integration-response \
          --rest-api-id "$api_id" \
          --resource-id "$health_resource_id" \
          --http-method GET \
          --status-code 200 \
          --selection-pattern ""

        echo "Adding Lambda permission..."
        timestamp=$(date +%s)
        aws lambda add-permission \
          --function-name "$function_name" \
          --statement-id "apigateway-health-${timestamp}" \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:${api_id}/*/GET/health"

        echo "Creating API key..."
        api_key_response=$(aws apigateway create-api-key \
          --name "lesson-completion-api-key" \
          --enabled \
          --generate-distinct-id)
        
        api_key_id=$(echo "$api_key_response" | jq -r '.id')
        api_key_value=$(echo "$api_key_response" | jq -r '.value')

        echo "Creating usage plan..."
        usage_plan_response=$(aws apigateway create-usage-plan \
          --name "lesson-completion-api-plan" \
          --description "Usage plan for lesson completion API")
        
        usage_plan_id=$(echo "$usage_plan_response" | jq -r '.id')

        echo "Creating stage..."
        aws apigateway create-deployment \
          --rest-api-id "$api_id" \
          --stage-name "prod"

        echo "Updating usage plan with stage..."
        aws apigateway update-usage-plan \
          --usage-plan-id "$usage_plan_id" \
          --patch-operations op=add,path=/apiStages,value="${api_id}:prod"

        echo "Associating API key with usage plan..."
        aws apigateway create-usage-plan-key \
          --usage-plan-id "$usage_plan_id" \
          --key-id "$api_key_id" \
          --key-type "API_KEY"

        echo "Waiting for deployment..."
        sleep 30

        echo "Testing API..."
        for i in {1..3}; do
          echo "Attempt $i..."
          response=$(curl -s -w "\n%{http_code}" \
            -H "x-api-key: ${api_key_value}" \
            "https://${api_id}.execute-api.${AWS_DEFAULT_REGION}.amazonaws.com/prod/health")
          
          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n-1)
          
          echo "Status code: $status_code"
          echo "Response body: $response_body"
          
          if [ "$status_code" == "200" ]; then
            echo "API health check successful!"
            break
          fi
          
          if [ $i -eq 3 ]; then
            echo "API health check failed after 3 attempts"
            exit 1
          fi
          
          echo "Retrying in 10 seconds..."
          sleep 10
        done

        echo "Setup complete!"
        echo "API Base URL: https://${api_id}.execute-api.${AWS_DEFAULT_REGION}.amazonaws.com/prod"
        echo "API Key: ${api_key_value}"
        
  